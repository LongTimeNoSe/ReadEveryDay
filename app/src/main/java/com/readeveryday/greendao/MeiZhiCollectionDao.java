package com.readeveryday.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEI_ZHI_COLLECTION".
*/
public class MeiZhiCollectionDao extends AbstractDao<MeiZhiCollection, Long> {

    public static final String TABLENAME = "MEI_ZHI_COLLECTION";

    /**
     * Properties of entity MeiZhiCollection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MeiZhiId = new Property(0, Long.class, "meiZhiId", true, "_id");
        public final static Property ImageUrl = new Property(1, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property ImageDesc = new Property(2, String.class, "imageDesc", false, "IMAGE_DESC");
    }


    public MeiZhiCollectionDao(DaoConfig config) {
        super(config);
    }
    
    public MeiZhiCollectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEI_ZHI_COLLECTION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: meiZhiId
                "\"IMAGE_URL\" TEXT," + // 1: imageUrl
                "\"IMAGE_DESC\" TEXT);"); // 2: imageDesc
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEI_ZHI_COLLECTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MeiZhiCollection entity) {
        stmt.clearBindings();
 
        Long meiZhiId = entity.getMeiZhiId();
        if (meiZhiId != null) {
            stmt.bindLong(1, meiZhiId);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(2, imageUrl);
        }
 
        String imageDesc = entity.getImageDesc();
        if (imageDesc != null) {
            stmt.bindString(3, imageDesc);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MeiZhiCollection entity) {
        stmt.clearBindings();
 
        Long meiZhiId = entity.getMeiZhiId();
        if (meiZhiId != null) {
            stmt.bindLong(1, meiZhiId);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(2, imageUrl);
        }
 
        String imageDesc = entity.getImageDesc();
        if (imageDesc != null) {
            stmt.bindString(3, imageDesc);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MeiZhiCollection readEntity(Cursor cursor, int offset) {
        MeiZhiCollection entity = new MeiZhiCollection( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // meiZhiId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // imageDesc
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MeiZhiCollection entity, int offset) {
        entity.setMeiZhiId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImageUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MeiZhiCollection entity, long rowId) {
        entity.setMeiZhiId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MeiZhiCollection entity) {
        if(entity != null) {
            return entity.getMeiZhiId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MeiZhiCollection entity) {
        return entity.getMeiZhiId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
